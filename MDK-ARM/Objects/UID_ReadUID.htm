<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\UID_ReadUID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\UID_ReadUID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Tue Aug 19 10:31:30 2025
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tud_task_ext &rArr; process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[c]">BKP_TAMPER_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from mm32f5270_it.o(.text.BusFault_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[42]">COMP_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[15]">DMA1_CH1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[16]">DMA1_CH2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[17]">DMA1_CH3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[18]">DMA1_CH4_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[19]">DMA1_CH5_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1a]">DMA1_CH6_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1b]">DMA1_CH7_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1d]">DMA1_CH8_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3b]">DMA2_CH1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3c]">DMA2_CH2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3d]">DMA2_CH3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3e]">DMA2_CH4_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3f]">DMA2_CH5_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[45]">DMA2_CH6_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[46]">DMA2_CH7_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[47]">DMA2_CH8_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from mm32f5270_it.o(.text.DebugMon_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[40]">ENET_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[41]">ENET_WKUP_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1f]">EXTI9_5_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1e]">FlexCAN1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[43]">FlexCAN2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mm32f5270_it.o(.text.HardFault_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[4b]">LPTIM_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[4c]">LPUART_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from mm32f5270_it.o(.text.MemManage_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mm32f5270_it.o(.text.NMI_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from mm32f5270_it.o(.text.PendSV_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[4a]">QSPI_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2f]">RTC_ALR_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f5270_keil.o(.text.Reset_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[36]">SPI3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[6]">SVCall_Handler</a> from mm32f5270_it.o(.text.SVCall_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from mm32f5270_it.o(.text.SysTick_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[21]">TIM1_UP_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[35]">TIM5_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[39]">TIM6_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[3a]">TIM7_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[31]">TIM8_BRK_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[34]">TIM8_CC_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[33]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[32]">TIM8_UP_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[2d]">UART3_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[37]">UART4_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[38]">UART5_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[48]">UART6_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[49]">UART7_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[44]">USB_FS_IRQHandler</a> from tud_dcd_port.o(.text.USB_FS_IRQHandler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[30]">USB_WKUP_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from mm32f5270_it.o(.text.UsageFault_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[a]">WWDG_IWDG_IRQHandler</a> from startup_mm32f5270_keil.o(.text.Default_Handler) referenced from startup_mm32f5270_keil.o(RESET)
 <LI><a href="#[51]">hidd_control_xfer_cb</a> from hid_device.o(.text.hidd_control_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[4e]">hidd_init</a> from hid_device.o(.text.hidd_init) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[50]">hidd_open</a> from hid_device.o(.text.hidd_open) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[4f]">hidd_reset</a> from hid_device.o(.text.hidd_reset) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[52]">hidd_xfer_cb</a> from hid_device.o(.text.hidd_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[4d]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[53]">usbd_int_set</a> from usbd.o(.text.usbd_int_set) referenced from usbd.o(.data..L_MergedGlobals)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[be]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[75]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appVerify
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_get_report_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appVerify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_reset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_reset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmentInfo
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ad]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>AutoCalPllFactor</STRONG> (Thumb, 1710 bytes, Stack size 68 bytes, system_mm32f5270.o(.text.AutoCalPllFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AutoCalPllFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>Boot_SendGroup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boot.o(.text.Boot_SendGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Boot_SendGroup &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BKP_TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[40]"></a>ENET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FlexCAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FlexCAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>QSPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_ALR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FLASH_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_ErasePage</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_ErasePage))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[79]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[78]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_ProgramHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_Read</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, boot.o(.text.FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_Init</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_gpio.o(.text.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>PLATFORM_DelayMS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, platform.o(.text.PLATFORM_DelayMS))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mm32f5270_keil.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVCall_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.SVCall_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 1192 bytes, Stack size 56 bytes, system_mm32f5270.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SystemInit &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[9f]"></a>UART_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>UART_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(.text.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>USB_BufDesp_GetPacketAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_GetPacketAddr))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[6b]"></a>USB_BufDesp_GetPacketSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_GetPacketSize))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[6a]"></a>USB_BufDesp_GetTokenPid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_GetTokenPid))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[8a]"></a>USB_BufDesp_IsBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_IsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
</UL>

<P><STRONG><a name="[70]"></a>USB_BufDesp_Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[66]"></a>USB_BufDesp_Xfer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_BufDesp_Xfer))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
</UL>

<P><STRONG><a name="[61]"></a>USB_BusResetHandler</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, tud_dcd_port.o(.text.USB_BusResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_BusResetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableOddEvenReset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[71]"></a>USB_ClearInterruptStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_ClearInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[8e]"></a>USB_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[64]"></a>USB_EnableEndPoint</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_EnableEndPoint))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
</UL>

<P><STRONG><a name="[85]"></a>USB_EnableEndPointStall</STRONG> (Thumb, 1934 bytes, Stack size 8 bytes, hal_usb.o(.text.USB_EnableEndPointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableEndPointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[90]"></a>USB_EnableInterrupts</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
</UL>

<P><STRONG><a name="[62]"></a>USB_EnableOddEvenReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_EnableOddEvenReset))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
</UL>

<P><STRONG><a name="[73]"></a>USB_EnableSuspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_EnableSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[44]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tud_dcd_port.o(.text.USB_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USB_FS_IRQHandler &rArr; dcd_int_handler &rArr; tud_task_ext &rArr; process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USB_GetBufDesp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_GetBufDesp))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[6f]"></a>USB_GetBufDespOddEven</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_GetBufDespOddEven))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[6d]"></a>USB_GetEndPointIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_GetEndPointIndex))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[92]"></a>USB_GetInterruptStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_GetInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[6e]"></a>USB_GetXferDirection</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_GetXferDirection))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[8d]"></a>USB_InitDevice</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_InitDevice))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[63]"></a>USB_SetDeviceAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_usb.o(.text.USB_SetDeviceAddr))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
</UL>

<P><STRONG><a name="[68]"></a>USB_TokenDoneHandler</STRONG> (Thumb, 620 bytes, Stack size 56 bytes, tud_dcd_port.o(.text.USB_TokenDoneHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_TokenDoneHandler &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableSuspend
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Reset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDespOddEven
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetXferDirection
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEndPointIndex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_GetPacketAddr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_GetPacketSize
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_GetTokenPid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetBufDesp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32f5270_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5270_keil.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>appCodeDownload</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, boot.o(.text.appCodeDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = appCodeDownload &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[7a]"></a>appVerify</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, boot.o(.text.appVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = appVerify &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[7b]"></a>boot_protocol</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, boot.o(.text.boot_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = boot_protocol &rArr; appVerify &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmentInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appVerify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_SendGroup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLATFORM_DelayMS
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>dcd_edpt_clear_stall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tud_dcd_port.o(.text.dcd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_clear_stall &rArr; USB_EnableEndPointStall
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
</UL>

<P><STRONG><a name="[86]"></a>dcd_edpt_close_all</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, tud_dcd_port.o(.text.dcd_edpt_close_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_edpt_close_all
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[87]"></a>dcd_edpt_open</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tud_dcd_port.o(.text.dcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_open
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
</UL>

<P><STRONG><a name="[88]"></a>dcd_edpt_stall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tud_dcd_port.o(.text.dcd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_stall &rArr; USB_EnableEndPointStall
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[89]"></a>dcd_edpt_xfer</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, tud_dcd_port.o(.text.dcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_IsBusy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>

<P><STRONG><a name="[72]"></a>dcd_event_handler</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, usbd.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
</UL>

<P><STRONG><a name="[8c]"></a>dcd_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tud_dcd_port.o(.text.dcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[8f]"></a>dcd_int_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tud_dcd_port.o(.text.dcd_int_disable))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_set
</UL>

<P><STRONG><a name="[91]"></a>dcd_int_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tud_dcd_port.o(.text.dcd_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[67]"></a>dcd_int_handler</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, tud_dcd_port.o(.text.dcd_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dcd_int_handler &rArr; tud_task_ext &rArr; process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEndPointStall
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterruptStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearInterruptStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TokenDoneHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BusResetHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>dcd_set_address</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tud_dcd_port.o(.text.dcd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_IsBusy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BufDesp_Xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[7d]"></a>eraseAppSpace</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, boot.o(.text.eraseAppSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eraseAppSpace &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[51]"></a>hidd_control_xfer_cb</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, hid_device.o(.text.hidd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hidd_control_xfer_cb &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_descriptor_report_cb
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_get_report_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[4e]"></a>hidd_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hid_device.o(.text.hidd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[50]"></a>hidd_open</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, hid_device.o(.text.hidd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[4f]"></a>hidd_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hid_device.o(.text.hidd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[52]"></a>hidd_xfer_cb</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, hid_device.o(.text.hidd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hidd_xfer_cb &rArr; tud_hid_set_report_cb &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; tud_task_ext &rArr; process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7f]"></a>segmentInfo</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, boot.o(.text.segmentInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = segmentInfo &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[ab]"></a>tu_edpt_bind_driver</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tusb.o(.text.tu_edpt_bind_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_edpt_bind_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[b8]"></a>tu_edpt_claim</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tusb.o(.text.tu_edpt_claim))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[b9]"></a>tu_edpt_validate</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tusb.o(.text.tu_edpt_validate))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
</UL>

<P><STRONG><a name="[af]"></a>tu_fifo_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tusb_fifo.o(.text.tu_fifo_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[ac]"></a>tu_fifo_read</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[8b]"></a>tu_fifo_write</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>

<P><STRONG><a name="[97]"></a>tud_control_status</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_control.o(.text.tud_control_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tud_control_status &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[96]"></a>tud_control_xfer</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usbd_control.o(.text.tud_control_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[a9]"></a>tud_descriptor_configuration_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_descriptor_configuration_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[a7]"></a>tud_descriptor_device_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_descriptor_device_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[a8]"></a>tud_descriptor_string_cb</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_descriptors.o(.text.tud_descriptor_string_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tud_descriptor_string_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[95]"></a>tud_hid_descriptor_report_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_hid_descriptor_report_cb))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[99]"></a>tud_hid_get_report_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.tud_hid_get_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tud_hid_get_report_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[5c]"></a>tud_hid_n_report</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hid_device.o(.text.tud_hid_n_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAppFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseAppSpace
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appCodeDownload
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmentInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appVerify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_SendGroup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[98]"></a>tud_hid_set_report_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.tud_hid_set_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tud_hid_set_report_cb &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_xfer_cb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[a5]"></a>tud_init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, usbd.o(.text.tud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tud_init &rArr; dcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>tud_inited</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(.text.tud_inited))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_inited
</UL>

<P><STRONG><a name="[93]"></a>tud_task_ext</STRONG> (Thumb, 1672 bytes, Stack size 64 bytes, usbd.o(.text.tud_task_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tud_task_ext &rArr; process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_request
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_reset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_complete_callback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_inited
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>tusb_inited</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tusb.o(.text.tusb_inited))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_inited
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[b3]"></a>usbd_control_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_reset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[b1]"></a>usbd_control_set_complete_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_set_complete_callback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[b5]"></a>usbd_control_set_request</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_set_request))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[b2]"></a>usbd_control_xfer_cb</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, usbd_control.o(.text.usbd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_control_xfer_cb &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[ae]"></a>usbd_edpt_claim</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd.o(.text.usbd_edpt_claim))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>

<P><STRONG><a name="[b4]"></a>usbd_edpt_clear_stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd.o(.text.usbd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_edpt_clear_stall &rArr; dcd_edpt_clear_stall &rArr; USB_EnableEndPointStall
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[b6]"></a>usbd_edpt_stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd.o(.text.usbd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_edpt_stall &rArr; dcd_edpt_stall &rArr; USB_EnableEndPointStall
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[9b]"></a>usbd_edpt_xfer</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd.o(.text.usbd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_xfer_cb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>

<P><STRONG><a name="[53]"></a>usbd_int_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd.o(.text.usbd_int_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_int_set &rArr; dcd_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[9a]"></a>usbd_open_edpt_pair</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, usbd.o(.text.usbd_open_edpt_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_open_edpt_pair &rArr; dcd_edpt_open
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_validate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_open
</UL>

<P><STRONG><a name="[7e]"></a>writeAppFlag</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, boot.o(.text.writeAppFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = writeAppFlag &rArr; tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>CheckSum</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, boot.o(.text.CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[82]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, boot.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_protocol
</UL>

<P><STRONG><a name="[83]"></a>configuration_reset</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, usbd.o(.text.configuration_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = configuration_reset &rArr; hidd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_reset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[aa]"></a>process_set_config</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, usbd.o(.text.process_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = process_set_config &rArr; hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_open
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_bind_driver
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[a6]"></a>process_get_descriptor</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, usbd.o(.text.process_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = process_get_descriptor &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_device_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
